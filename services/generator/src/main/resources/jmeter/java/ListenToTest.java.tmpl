/**
 * 
 */
package org.ats.generated;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.jmeter.samplers.Remoteable;
import org.apache.jmeter.testelement.TestStateListener;
import org.apache.jmeter.util.JMeterUtils;
import org.apache.jorphan.logging.LoggingManager;
import org.apache.log.Logger;

/**
 * @author <a href="mailto:haithanh0809@gmail.com">Nguyen Thanh Hai</a>
 *
 * Jul 18, 2015
 */
public class ListenToTest implements TestStateListener, Runnable, Remoteable {
  private final AtomicInteger started = new AtomicInteger(0);

  @Override
  public void testEnded(String host) {
    long now=System.currentTimeMillis();
    System.out.println("Finished remote host: " + host + " ("+now+")");
    if (started.decrementAndGet() <= 0) {
      Thread stopSoon = new Thread(this);
      stopSoon.start();
    }
  }

  @Override
  public void testEnded() {
    long now = System.currentTimeMillis();
    System.out.println("Tidying up ...    @ "+new Date(now)+" ("+now+")");
    System.out.println("... end of run");
  }

  @Override
  public void testStarted(String host) {
    started.incrementAndGet();
    long now=System.currentTimeMillis();
    System.out.println("Started remote host:  " + host + " ("+now+")");
  }

  @Override
  public void testStarted() {
    long now=System.currentTimeMillis();
    System.out.println(JMeterUtils.getResString("running_test")+" ("+now+")");
  }

  @Override
  public void run() {
    long now = System.currentTimeMillis();
    System.out.println("Tidying up remote @ "+new Date(now)+" ("+now+")");
    try {
      TimeUnit.SECONDS.sleep(5);
    } catch (InterruptedException ignored) {
    }
    
    System.out.println("... end of run");
    Logger logger = LoggingManager.getLoggerForClass();
    logger.info("Shutdown Test Thread");
  }
}
